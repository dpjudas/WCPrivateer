name: Continuous Integration

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Visual Studio 2022
          os: windows-2022
          build_type: RelWithDebInfo

        - name: Visual Studio 2022
          os: windows-2022
          build_type: Debug

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      shell: bash
      run: |
        mkdir build
        if [[ "${{ runner.os }}" == 'macOS' ]]; then
          export ZMUSIC_PACKAGE=zmusic-1.1.14-macos-arm.tar.xz
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          export ZMUSIC_PACKAGE=zmusic-1.1.14-linux.tar.xz
        fi
        if [[ -n "${ZMUSIC_PACKAGE}" ]]; then
          cd build
          wget -q "https://github.com/coelckers/gzdoom/releases/download/ci_deps/${ZMUSIC_PACKAGE}"
          tar -xf "${ZMUSIC_PACKAGE}"
        fi
    
    - name: Configure
      shell: bash
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_PREFIX_PATH=`pwd`/build/zmusic -DPK3_QUIET_ZIPDIR=ON ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: Create Package
      if: (runner.os == 'Windows') && matrix.config.build_type == 'RelWithDebInfo'
      shell: bash
      run: |
        cd build
        mkdir package
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          cp -r ${{ matrix.config.build_type }}/WCPrivateer.exe ${{ matrix.config.build_type }}/soundfonts package
          cp ../Binaries/licenses.zip ../Binaries/windows/zmusic/64bit/zmusic.dll package
        fi

    - name: Upload Package
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        path: build/package
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build

  deploy:
    name: Update Latest successful build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: Visual Studio 2022 RelWithDebInfo
        path: build/wcprivateer-windows-prerelease

    - name: Zip artifacts
      shell: bash
      run: |
        cd build
        zip -r wcprivateer-windows-prerelease.zip wcprivateer-windows-prerelease

    - name: Update nightly release
      uses: pyTooling/Actions/releaser@r0
      with:
        tag: nightly
        rm: true
        token: ${{ secrets.GITHUB_TOKEN }}
        files: build/wcprivateer-windows-prerelease.zip
